Code-Snippets von Stackoverflow und Tutorials

# Siehe Kommentare in der Main Klasse

#Erklären was eine VENV ist

# NumPy is the most popular library for Python and that is for a reason. I didn't want to use it, because it needs some advanced knowledge to get
 it understood.
However I introduced a little example to show how it works.
# I use Maven to get all required packages and dependencies installed, just like we do with Java.
# To make a Python application distributable it's recommended to use venv (virtual environment). The latter is a collections of scripts and
symbolic links.

Let’s go through this. First, we create a Context.Builder and request the "python" language to be available. (More languages are implicitly enabled. For example, Python depends on the "llvm" language for its C extension support.) Next, we set the flag to allow all access to native code, the file system, etc. It's ok for now to start with all permissions to get things going and whittle down to what we need later.

The two option calls go hand in hand and need a bit more Python background. The Python executable on your machine always, as part of its startup code, executes the equivalent of import site. The site module is responsible for setting up the package paths for user and system packages, as well as discovering if the executable is inside a virtual environment and then setting the package paths accordingly.

#Schwierigkeiten:
    ##Kryptische Fehlermeldungen der Gastsprachen
    ##Man muss sich mit den Eigenheiten der einzelnen Sprachen/Modulsysteme/Build-Prozesse/TestLibraries auseinandersetzen
    ##Libraries die nicht mehr kompatibel sind, etc.
    ## I had problems with resolving paths, etc.
    ##Packages/Module that cause problems. For many of them there is already patched versions, but not for all..
# I have to explain what is a python virtual environment and why to use it

# Man muss Python-Funktionen annotieren, die man exportieren möchte, sonst sind sie in den PolyglotBindingsMemberKeys nicht enthalten

# Asserts:
    - Image checksum, size, colors are exactly the same
# Hier sollen Tests aus Java angestoßen werden, dann die von Python, dann zurück
    Java Test triggert Python Test, und wenn dieser fertig ist, der gibt sein Ergebnis an den JavaTest zurück.
    Wenn Python Test fehlschlägt, dann soll der JavaTest auch fehlschlagen
    Wenn der UnitTest in der Gastsprache (z.b. NodeJs) fehlschlägt, wie bekommt man das ganze Ergebnis (Bei mocha z.B. sehr schön formatiert)
    Wenn Test fehlschlägt, führt man weiter aus, oder bricht man das ganze ab

# Eine wichtige Einschränkung: Ich hatte ien ImageUtils-Klasse, die nur statische Methoden hat. Das funktioniert aber nicht gut: statische
Methoden haben keinen Zustand, daher muss der Context jedesmal neu gebildet werden, und das ist sehr teuer. Das will man natürlich nicht. Deshalb
 war ich GEZWUNGEN, einen Processor daraus zu machen, der den Context als Zustand hält. Vlt. ist das ein Grund warum lieber Python für die Tests
 nutzen.. weiß ich nicht.